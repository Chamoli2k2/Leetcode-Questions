Approach 1 : Memomization
class Solution {
private:
    int solve(vector<int> &a,vector<vector<int>> &dp,int idx,int prev,int n){
        // base case
        if(idx == n){
            return 0;
        }
        
        
        if(dp[idx][prev+1] != -1){
            return dp[idx][prev+1];
        }
        
        // not take 
        int notTake = solve(a,dp,idx+1,prev,n);
        
        int len = notTake;
        // taking idx
        int take;
        if(prev == -1 or a[idx] > a[prev]){
            take = 1 + solve(a,dp,idx+1,idx,n);
            
            len = max(take,notTake);
        } 
        
        
        dp[idx][prev+1] = len;
        
        
        return dp[idx][prev+1];
        
    }
public:
    int lengthOfLIS(vector<int>& nums) {
        int n = nums.size();
        
        vector<vector<int>> dp(n,vector<int>(n+1,-1));
        
        return solve(nums,dp,0,-1,n);
    }
};
Approach 2 : Tabulation
class Solution {
public:
    int lengthOfLIS(vector<int>& a) {
        int n = a.size();
        
        vector<vector<int>> dp(n+1,vector<int>(n+1,0));
        
        for(int idx=n-1;idx>=0;idx--){
            for(int prev=idx-1;prev>=-1;prev--){
                // not take 
                int notTake = dp[idx+1][prev+1];

                int len = notTake;
                // taking idx
                int take;
                if(prev == -1 or a[idx] > a[prev]){
                    take = 1 + dp[idx+1][idx+1];

                    len = max(take,notTake);
                } 


                dp[idx][prev+1] = len;
            }
            
        }
        return dp[0][0];
    }
};
