class Solution {
public:
    int largestRectangleArea(vector<int>& arr) {
        stack<pair<long long,int>>  st;
        vector<int> ls;
        vector<int> rs;
        int n=arr.size();
        // step 1 find previous smaller element from left side
        for(int i=0;i<n;i++){
            long long num=arr[i];
            while(!st.empty() and st.top().first>=num){
                st.pop();
            }
            
            if(st.empty()){
                ls.push_back(-1);
            }else{
                ls.push_back(st.top().second);
            }
            
            st.push({num,i});
        }
        
        // emptying the stack
        while(!st.empty()){
            st.pop();
        }
        
        // step 1 find previous smaller element from right side
        for(int i=n-1;i>=0;i--){
            long long num=arr[i];
            while(!st.empty() and st.top().first>=num){
                st.pop();
            }
            
            if(st.empty()){
                rs.push_back(n);
            }else{
                rs.push_back(st.top().second);
            }
            
            st.push({num,i});
        }
        
        // Reversing the rs
        reverse(rs.begin(),rs.end());
        
        // calculating the area
        long long ans=0;
        
        for(int i=0;i<n;i++){
            long long area=(rs[i]-ls[i]-1)*arr[i];
            ans=max(ans,area);
        }
        
        // returning the finally answer
        return ans;
    }
};
